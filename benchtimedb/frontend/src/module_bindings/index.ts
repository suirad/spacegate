// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  type CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  type ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  type SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddData } from "./add_data_reducer.ts";
export { AddData };
import { AddLog } from "./add_log_reducer.ts";
export { AddLog };
import { Connect } from "./connect_reducer.ts";
export { Connect };
import { DeleteDataWorker } from "./delete_data_worker_reducer.ts";
export { DeleteDataWorker };

// Import and reexport all table handle types
import { ClockSyncTableHandle } from "./clock_sync_table.ts";
export { ClockSyncTableHandle };
import { DataTableHandle } from "./data_table.ts";
export { DataTableHandle };
import { DeleteDataTableHandle } from "./delete_data_table.ts";
export { DeleteDataTableHandle };
import { LogsTableHandle } from "./logs_table.ts";
export { LogsTableHandle };

// Import and reexport all types
import { ClockSync } from "./clock_sync_type.ts";
export { ClockSync };
import { Data } from "./data_type.ts";
export { Data };
import { DeleteData } from "./delete_data_type.ts";
export { DeleteData };
import { Logs } from "./logs_type.ts";
export { Logs };

const REMOTE_MODULE = {
  tables: {
    ClockSync: {
      tableName: "ClockSync",
      rowType: ClockSync.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    Data: {
      tableName: "Data",
      rowType: Data.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    DeleteData: {
      tableName: "DeleteData",
      rowType: DeleteData.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    Logs: {
      tableName: "Logs",
      rowType: Logs.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    AddData: {
      reducerName: "AddData",
      argsType: AddData.getTypeScriptAlgebraicType(),
    },
    AddLog: {
      reducerName: "AddLog",
      argsType: AddLog.getTypeScriptAlgebraicType(),
    },
    Connect: {
      reducerName: "Connect",
      argsType: Connect.getTypeScriptAlgebraicType(),
    },
    DeleteDataWorker: {
      reducerName: "DeleteDataWorker",
      argsType: DeleteDataWorker.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddData", args: AddData }
| { name: "AddLog", args: AddLog }
| { name: "Connect", args: Connect }
| { name: "DeleteDataWorker", args: DeleteDataWorker }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addData(data: number[]) {
    const __args = { data };
    let __writer = new BinaryWriter(1024);
    AddData.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddData", __argsBuffer, this.setCallReducerFlags.addDataFlags);
  }

  onAddData(callback: (ctx: ReducerEventContext, data: number[]) => void) {
    this.connection.onReducer("AddData", callback);
  }

  removeOnAddData(callback: (ctx: ReducerEventContext, data: number[]) => void) {
    this.connection.offReducer("AddData", callback);
  }

  addLog(sent: number, underLoad: boolean) {
    const __args = { sent, underLoad };
    let __writer = new BinaryWriter(1024);
    AddLog.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddLog", __argsBuffer, this.setCallReducerFlags.addLogFlags);
  }

  onAddLog(callback: (ctx: ReducerEventContext, sent: number, underLoad: boolean) => void) {
    this.connection.onReducer("AddLog", callback);
  }

  removeOnAddLog(callback: (ctx: ReducerEventContext, sent: number, underLoad: boolean) => void) {
    this.connection.offReducer("AddLog", callback);
  }

  onConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("Connect", callback);
  }

  removeOnConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("Connect", callback);
  }

  deleteDataWorker(deleteData: DeleteData) {
    const __args = { deleteData };
    let __writer = new BinaryWriter(1024);
    DeleteDataWorker.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeleteDataWorker", __argsBuffer, this.setCallReducerFlags.deleteDataWorkerFlags);
  }

  onDeleteDataWorker(callback: (ctx: ReducerEventContext, deleteData: DeleteData) => void) {
    this.connection.onReducer("DeleteDataWorker", callback);
  }

  removeOnDeleteDataWorker(callback: (ctx: ReducerEventContext, deleteData: DeleteData) => void) {
    this.connection.offReducer("DeleteDataWorker", callback);
  }

}

export class SetReducerFlags {
  addDataFlags: CallReducerFlags = 'FullUpdate';
  addData(flags: CallReducerFlags) {
    this.addDataFlags = flags;
  }

  addLogFlags: CallReducerFlags = 'FullUpdate';
  addLog(flags: CallReducerFlags) {
    this.addLogFlags = flags;
  }

  deleteDataWorkerFlags: CallReducerFlags = 'FullUpdate';
  deleteDataWorker(flags: CallReducerFlags) {
    this.deleteDataWorkerFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get clockSync(): ClockSyncTableHandle {
    return new ClockSyncTableHandle(this.connection.clientCache.getOrCreateTable<ClockSync>(REMOTE_MODULE.tables.ClockSync));
  }

  get data(): DataTableHandle {
    return new DataTableHandle(this.connection.clientCache.getOrCreateTable<Data>(REMOTE_MODULE.tables.Data));
  }

  get deleteData(): DeleteDataTableHandle {
    return new DeleteDataTableHandle(this.connection.clientCache.getOrCreateTable<DeleteData>(REMOTE_MODULE.tables.DeleteData));
  }

  get logs(): LogsTableHandle {
    return new LogsTableHandle(this.connection.clientCache.getOrCreateTable<Logs>(REMOTE_MODULE.tables.Logs));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
